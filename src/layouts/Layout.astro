---
import "$/styles/global.css";
import { Toaster } from "svelte-sonner";
import { ModeWatcher } from "mode-watcher";

export interface Props {
  class?: string;
}

let { class: classList } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta
      name="viewport"
      content="viewport-fit=cover, width=device-width, initial-scale=1.0 user-scalable=no"
    />
    <meta charset="UTF-8" />
    <meta name="color" content="#0A0A0A" />
    <meta name="theme-color" content="#0A0A0A" />
    <meta name="application-name" content="t9r" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Just a Bit Outside Podcast</title>
    <link rel="icon" href="/favicon.ico" />
    <link rel="manifest" href="/manifest.json" />
    <link rel="apple-touch-icon" href="icons/apple-icon-180.png" />
    <meta name="mobile-web-app-capable" content="yes" />
  </head>

  <body class={classList}>
    <slot />
    <ModeWatcher client:only="svelte" />
    <Toaster
      client:only="svelte"
      toastOptions={{
        classes: {
          error: "border-red-500/50",
          info: "border-blue-500/50",
          success: "border-green-500/50",
          warning: "border-amber-500/50",
        },
      }}
    />
  </body>

  <script is:inline>
    const isBrowser = typeof localStorage !== "undefined";
    const getThemePreference = () => {
      if (isBrowser && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (isBrowser) {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }

    if ("serviceWorker" in navigator) {
      window.addEventListener("load", async () => {
        try {
          const { scope } = await navigator.serviceWorker.register("/sw.js");
          console.log(`Worker started with scope: ${scope}`);
        } catch (err) {
          console.log(`Worker failed with error: ${err}`);
        }
      });
    }
  </script>
</html>
