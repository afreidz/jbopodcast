generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

enum MEMBER_ROLE {
  host
  guest
  admin

  @@schema("public")
}

enum CALL_SCENE {
  pull
  twoUp
  fourUp
  splash
  threeUp
  countdown
  spotlight

  @@schema("public")
}

model members {
  id                   String       @id @default(uuid()) @db.Uuid
  name                 String?
  handle               String?      @unique
  role                 MEMBER_ROLE  @default(guest)
  hostCalls            calls[]      @relation("HostRelation")
  initiatorConnections connection[] @relation("InitiatorRelation")
  receiverConnections  connection[] @relation("ReceiverRelation")
  AInScene             scene[]      @relation("ScenePositionARelation")
  BInScene             scene[]      @relation("ScenePositionBRelation")
  CInScene             scene[]      @relation("ScenePositionCRelation")
  DInScene             scene[]      @relation("ScenePositionDRelation")
  guestCalls           calls[]      @relation("GuestRelation")
  // user                 users        @relation(fields: [id], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@schema("public")
}

model calls {
  id          String       @id @default(uuid()) @db.Uuid
  scheduled   DateTime     @default(now()) @db.Timestamptz(0)
  completed   DateTime?    @db.Timestamptz(0)
  title       String?
  hostId      String       @db.Uuid
  host        members      @relation("HostRelation", fields: [hostId], references: [id], onDelete: Cascade)
  connections connection[]
  scenes      scene[]
  guests      members[]    @relation("GuestRelation")

  @@unique([scheduled, hostId])
  @@schema("public")
}

model scene {
  id             String     @id @default(uuid()) @db.Uuid
  type           CALL_SCENE
  label          String
  callId         String     @db.Uuid
  splashImageURL String?
  countdownMS    Int?
  AID            String?    @db.Uuid
  BID            String?    @db.Uuid
  CID            String?    @db.Uuid
  DID            String?    @db.Uuid
  A              members?   @relation("ScenePositionARelation", fields: [AID], references: [id])
  B              members?   @relation("ScenePositionBRelation", fields: [BID], references: [id])
  C              members?   @relation("ScenePositionCRelation", fields: [CID], references: [id])
  D              members?   @relation("ScenePositionDRelation", fields: [DID], references: [id])
  call           calls      @relation(fields: [callId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model connection {
  id     String  @id @default(uuid()) @db.Uuid
  callId String  @db.Uuid
  fromId String  @db.Uuid
  toId   String  @db.Uuid
  offer  Json?
  answer Json?
  ice    Json?
  call   calls   @relation(fields: [callId], references: [id], onDelete: Cascade)
  from   members @relation("InitiatorRelation", fields: [fromId], references: [id], onDelete: Cascade)
  to     members @relation("ReceiverRelation", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([callId, fromId, toId])
  @@schema("public")
}

////////////////////////////////////////////////////////////////////
///üëáüèª The below models are introspected from Supabase.  IGNORE THEM!
////////////////////////////////////////////////////////////////////
